"""–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞."""
import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram.types import Message, User, Chat
from src.bot.handlers import init_llm, handle_start, handle_help, handle_message


class TestInitLLM:
    """–¢–µ—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM."""
    
    @pytest.mark.asyncio
    async def test_init_llm_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM."""
        mock_config = MagicMock()
        mock_config.openrouter_api_key = "test_key"
        mock_config.cleanup_interval_hours = 6
        mock_config.memory_ttl_hours = 24
        mock_config.log_hourly_stats = False
        
        with patch('src.bot.handlers.create_llm_client') as mock_create_client, \
             patch('src.bot.handlers.load_system_prompt') as mock_load_prompt, \
             patch('src.bot.handlers.start_cleanup_task') as mock_cleanup, \
             patch('src.bot.handlers.start_hourly_stats_logging') as mock_stats:
            
            mock_client = AsyncMock()
            mock_create_client.return_value = mock_client
            mock_load_prompt.return_value = "Test prompt"
            
            await init_llm(mock_config)
            
            mock_create_client.assert_called_once_with("test_key")
            mock_load_prompt.assert_called_once()
            mock_cleanup.assert_called_once_with(6, 24)
            mock_stats.assert_not_called()  # log_hourly_stats = False
    
    @pytest.mark.asyncio
    async def test_init_llm_with_stats_logging(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        mock_config = MagicMock()
        mock_config.openrouter_api_key = "test_key"
        mock_config.cleanup_interval_hours = 6
        mock_config.memory_ttl_hours = 24
        mock_config.log_hourly_stats = True
        
        with patch('src.bot.handlers.create_llm_client') as mock_create_client, \
             patch('src.bot.handlers.load_system_prompt') as mock_load_prompt, \
             patch('src.bot.handlers.start_cleanup_task') as mock_cleanup, \
             patch('src.bot.handlers.start_hourly_stats_logging') as mock_stats:
            
            mock_client = AsyncMock()
            mock_create_client.return_value = mock_client
            mock_load_prompt.return_value = "Test prompt"
            
            await init_llm(mock_config)
            
            mock_stats.assert_called_once()


class TestHandleStart:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    
    def create_mock_message(self, user_id=123, first_name="TestUser"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        user = User(id=user_id, is_bot=False, first_name=first_name)
        chat = Chat(id=user_id, type="private")
        message = Message(
            message_id=1,
            date=1234567890,
            chat=chat,
            from_user=user,
            content_type="text",
            text="/start"
        )
        return message
    
    @pytest.mark.asyncio
    async def test_handle_start_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start."""
        message = self.create_mock_message(123, "TestUser")
        
        with patch('src.bot.handlers.get_user_session') as mock_get_session, \
             patch('src.bot.handlers.add_message') as mock_add_message, \
             patch('src.bot.handlers.config') as mock_config:
            
            mock_config.max_history_size = 10
            mock_session = {"user_id": 123, "user_name": "TestUser"}
            mock_get_session.return_value = mock_session
            
            await handle_start(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            mock_get_session.assert_called_once_with(123, "TestUser")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
            assert mock_add_message.call_count == 2
            mock_add_message.assert_any_call(123, "user", "/start", 10)
            mock_add_message.assert_any_call(123, "assistant", 
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, TestUser! üëã", 10)
    
    @pytest.mark.asyncio
    async def test_handle_start_without_first_name(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        message = self.create_mock_message(123, None)
        
        with patch('src.bot.handlers.get_user_session') as mock_get_session, \
             patch('src.bot.handlers.add_message') as mock_add_message, \
             patch('src.bot.handlers.config') as mock_config:
            
            mock_config.max_history_size = 10
            mock_session = {"user_id": 123, "user_name": "–¥—Ä—É–≥"}
            mock_get_session.return_value = mock_session
            
            await handle_start(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            mock_get_session.assert_called_once_with(123, "–¥—Ä—É–≥")


class TestHandleHelp:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    
    def create_mock_message(self, user_id=123, first_name="TestUser"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        user = User(id=user_id, is_bot=False, first_name=first_name)
        chat = Chat(id=user_id, type="private")
        message = Message(
            message_id=1,
            date=1234567890,
            chat=chat,
            from_user=user,
            content_type="text",
            text="/help"
        )
        return message
    
    @pytest.mark.asyncio
    async def test_handle_help_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help."""
        message = self.create_mock_message(123, "TestUser")
        
        with patch('src.bot.handlers.get_user_session') as mock_get_session, \
             patch('src.bot.handlers.add_message') as mock_add_message, \
             patch('src.bot.handlers.config') as mock_config:
            
            mock_config.max_history_size = 10
            mock_session = {"user_id": 123, "user_name": "TestUser"}
            mock_get_session.return_value = mock_session
            
            await handle_help(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            mock_get_session.assert_called_once_with(123, "TestUser")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
            assert mock_add_message.call_count == 2
            mock_add_message.assert_any_call(123, "user", "/help", 10)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã
            help_call = mock_add_message.call_args_list[1]
            assert "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤" in help_call[0][2]


class TestHandleMessage:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    def create_mock_message(self, text="Test message", user_id=123, first_name="TestUser"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        user = User(id=user_id, is_bot=False, first_name=first_name)
        chat = Chat(id=user_id, type="private")
        message = Message(
            message_id=1,
            date=1234567890,
            chat=chat,
            from_user=user,
            content_type="text",
            text=text
        )
        return message
    
    @pytest.mark.asyncio
    async def test_handle_message_llm_not_initialized(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ LLM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."""
        message = self.create_mock_message("Test message")
        
        with patch('src.bot.handlers.llm_client', None), \
             patch('src.bot.handlers.system_prompt', None), \
             patch('src.bot.handlers.config', None):
            
            await handle_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @pytest.mark.asyncio
    async def test_handle_message_too_long(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        long_text = "x" * 1001  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        message = self.create_mock_message(long_text)
        
        mock_config = MagicMock()
        mock_config.max_message_length = 1000
        
        with patch('src.bot.handlers.llm_client', MagicMock()), \
             patch('src.bot.handlers.system_prompt', "Test prompt"), \
             patch('src.bot.handlers.config', mock_config), \
             patch('src.bot.handlers.metrics_collector') as mock_metrics:
            
            await handle_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞
            mock_metrics.record_message.assert_called_once_with(123, 1001, False)
    
    @pytest.mark.asyncio
    async def test_handle_message_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        message = self.create_mock_message("Test message")
        
        mock_config = MagicMock()
        mock_config.max_message_length = 1000
        mock_config.max_history_size = 10
        mock_config.primary_model = "test-model"
        mock_config.fallback_model = "fallback-model"
        mock_config.retry_attempts = 3
        mock_config.temperature = 0.7
        mock_config.max_tokens = 1000
        mock_config.top_p = 0.9
        
        mock_llm_client = AsyncMock()
        mock_history = [{"role": "user", "content": "Previous message"}]
        
        with patch('src.bot.handlers.llm_client', mock_llm_client), \
             patch('src.bot.handlers.system_prompt', "Test prompt"), \
             patch('src.bot.handlers.config', mock_config), \
             patch('src.bot.handlers.get_user_session') as mock_get_session, \
             patch('src.bot.handlers.get_user_history', return_value=mock_history), \
             patch('src.bot.handlers.add_message') as mock_add_message, \
             patch('src.bot.handlers.generate_response_with_history') as mock_generate, \
             patch('src.bot.handlers.metrics_collector') as mock_metrics:
            
            mock_generate.return_value = "Test response"
            mock_session = {"user_id": 123, "user_name": "TestUser"}
            mock_get_session.return_value = mock_session
            
            await handle_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞
            mock_get_session.assert_called_once_with(123, "TestUser")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞
            from src.bot.handlers import get_user_history
            get_user_history.assert_called_once_with(123)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
            assert mock_add_message.call_count == 2
            mock_add_message.assert_any_call(123, "user", "Test message", 10)
            mock_add_message.assert_any_call(123, "assistant", "Test response", 10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω LLM
            mock_generate.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞
            mock_metrics.record_message.assert_called_once_with(123, 12, True)
    
    @pytest.mark.asyncio
    async def test_handle_message_llm_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ LLM."""
        message = self.create_mock_message("Test message")
        
        mock_config = MagicMock()
        mock_config.max_message_length = 1000
        mock_config.max_history_size = 10
        
        mock_llm_client = AsyncMock()
        
        with patch('src.bot.handlers.llm_client', mock_llm_client), \
             patch('src.bot.handlers.system_prompt', "Test prompt"), \
             patch('src.bot.handlers.config', mock_config), \
             patch('src.bot.handlers.get_user_session') as mock_get_session, \
             patch('src.bot.handlers.get_user_history', return_value=[]), \
             patch('src.bot.handlers.add_message') as mock_add_message, \
             patch('src.bot.handlers.generate_response_with_history') as mock_generate, \
             patch('src.bot.handlers.metrics_collector') as mock_metrics, \
             patch('src.bot.handlers.LLMError') as mock_llm_error:
            
            mock_generate.side_effect = mock_llm_error("LLM failed")
            mock_session = {"user_id": 123, "user_name": "TestUser"}
            mock_get_session.return_value = mock_session
            
            await handle_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞
            mock_metrics.record_message.assert_called_once_with(123, 12, False)
    
    @pytest.mark.asyncio
    async def test_handle_message_unexpected_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏."""
        message = self.create_mock_message("Test message")
        
        mock_config = MagicMock()
        mock_config.max_message_length = 1000
        
        mock_llm_client = AsyncMock()
        
        with patch('src.bot.handlers.llm_client', mock_llm_client), \
             patch('src.bot.handlers.system_prompt', "Test prompt"), \
             patch('src.bot.handlers.config', mock_config), \
             patch('src.bot.handlers.get_user_session') as mock_get_session, \
             patch('src.bot.handlers.metrics_collector') as mock_metrics:
            
            mock_get_session.side_effect = Exception("Unexpected error")
            
            await handle_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞
            mock_metrics.record_message.assert_called_once_with(123, 12, False)
