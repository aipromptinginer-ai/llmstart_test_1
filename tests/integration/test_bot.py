"""–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API."""
import asyncio
import os
import sys
import logging
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from config.settings import load_config
from bot.handlers import init_llm
from monitoring.metrics import metrics_collector


async def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        config = load_config()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Primary model: {config.primary_model}")
        print(f"   - Max message length: {config.max_message_length}")
        print(f"   - Enable metrics: {config.enable_metrics}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def test_llm_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM."""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM...")
    
    try:
        config = load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        if not config.telegram_bot_token:
            print("‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
            
        if not config.openrouter_api_key:
            print("‚ö†Ô∏è  OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
        await init_llm(config)
        print("‚úÖ LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM: {e}")
        return False


async def test_metrics_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫."""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫...")
    
    try:
        # –û—á–∏—â–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_collector.message_metrics.clear()
        metrics_collector.llm_metrics.clear()
        metrics_collector.hourly_stats.clear()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_collector.record_message(123, 100, True)
        metrics_collector.record_message(124, 200, False)
        metrics_collector.record_llm_request(True, "test-model", 1.5)
        metrics_collector.record_llm_request(False, "test-model", 0.5, "TestError")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = metrics_collector.get_current_hour_stats()
        
        assert stats['messages_count'] == 2
        assert stats['llm_requests'] == 2
        assert stats['llm_success_rate'] == 0.5
        assert stats['errors_count'] == 1
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ—Ç—Ä–∏–∫: {e}")
        return False


async def test_memory_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏."""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
    
    try:
        from memory.storage import get_user_session, add_message, get_user_history
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        from memory.storage import user_sessions
        user_sessions.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = get_user_session(123, "TestUser")
        assert session['user_id'] == 123
        assert session['user_name'] == "TestUser"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        add_message(123, "user", "Hello", 10)
        add_message(123, "assistant", "Hi there!", 10)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = get_user_history(123)
        assert len(history) == 2
        assert history[0]['role'] == "user"
        assert history[1]['role'] == "assistant"
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–∞–º—è—Ç–∏: {e}")
        return False


async def test_llm_client_mock():
    """–¢–µ—Å—Ç LLM –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–æ–∫–æ–º."""
    print("üîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–∫)...")
    
    try:
        from llm.client import create_llm_client, generate_response_with_history
        from unittest.mock import AsyncMock, MagicMock
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
        mock_client = AsyncMock()
        mock_response = MagicMock()
        mock_response.choices = [MagicMock()]
        mock_response.choices[0].message.content = "Test response"
        mock_client.chat.completions.create.return_value = mock_response
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        response = await generate_response_with_history(
            client=mock_client,
            system_prompt="Test system prompt",
            user_message="Test user message",
            message_history=[],
            primary_model="test-model",
            fallback_model="fallback-model",
            retry_attempts=3,
            temperature=0.7,
            max_tokens=1000,
            top_p=0.9
        )
        
        assert response == "Test response"
        print("‚úÖ LLM –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–º–æ–∫)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ LLM –∫–ª–∏–µ–Ω—Ç–µ: {e}")
        return False


async def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 50)
    
    tests = [
        test_config_loading,
        test_metrics_system,
        test_memory_system,
        test_llm_client_mock,
        test_llm_initialization,  # –ü–æ—Å–ª–µ–¥–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            result = await test()
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print("=" * 50)
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False


if __name__ == "__main__":
    asyncio.run(run_integration_tests())
